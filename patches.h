const byte Zone_Count = 4;

#define count_of(A) (sizeof(A)/sizeof(A[0]))
const byte patch_empty_zone[] = {-1};

// Generated by make patches.h:

// Patch built from check_sliders.patch
  const byte patch_check_sliders_z0[] = {0,1,2,3,4,-1};
const byte* patch_check_sliders[Zone_Count] = {patch_check_sliders_z0, patch_empty_zone, patch_empty_zone, patch_empty_zone};

// Patch built from [1] check_sliders.patch
  const byte patch_check_sliders_1_z1[] = {0,1,2,3,4,-1};
const byte* patch_check_sliders_1[Zone_Count] = {patch_empty_zone, patch_check_sliders_1_z1, patch_empty_zone, patch_empty_zone};

// Patch built from [2] check_sliders.patch
  const byte patch_check_sliders_2_z2[] = {0,1,2,3,4,-1};
const byte* patch_check_sliders_2[Zone_Count] = {patch_empty_zone, patch_empty_zone, patch_check_sliders_2_z2, patch_empty_zone};

// Patch built from [3] check_sliders.patch
  const byte patch_check_sliders_3_z3[] = {0,1,2,3,4,-1};
const byte* patch_check_sliders_3[Zone_Count] = {patch_empty_zone, patch_empty_zone, patch_empty_zone, patch_check_sliders_3_z3};

// Patch built from [across] check_sliders.patch
  const byte patch_check_sliders_across_z0[] = {0,1,2,3,4,-1};
  const byte patch_check_sliders_across_z1[] = {5,6,7,8,9,-1};
  const byte patch_check_sliders_across_z2[] = {10,11,12,13,14,-1};
const byte* patch_check_sliders_across[Zone_Count] = {patch_check_sliders_across_z0, patch_check_sliders_across_z1, patch_check_sliders_across_z2, patch_empty_zone};

// Patch built from [down] check_sliders.patch
  const byte patch_check_sliders_down_z0[] = {0,1,5,6,10,11,-1};
  const byte patch_check_sliders_down_z1[] = {2,7,11,-1};
  const byte patch_check_sliders_down_z2[] = {3,8,13,-1};
  const byte patch_check_sliders_down_z3[] = {4,9,14,-1};
const byte* patch_check_sliders_down[Zone_Count] = {patch_check_sliders_down_z0, patch_check_sliders_down_z1, patch_check_sliders_down_z2, patch_check_sliders_down_z3};

// Patch built from [all1] test.patch
  const byte patch_test_all1_z0[] = {0,1,2,3,4,-1};
const byte* patch_test_all1[Zone_Count] = {patch_test_all1_z0, patch_empty_zone, patch_empty_zone, patch_empty_zone};

// Patch built from [even_odd] test.patch
  const byte patch_test_even_odd_z0[] = {0,2,4,-1};
  const byte patch_test_even_odd_z1[] = {1,3,-1};
const byte* patch_test_even_odd[Zone_Count] = {patch_test_even_odd_z0, patch_test_even_odd_z1, patch_empty_zone, patch_empty_zone};

// Patch built from [zones_one_per] test.patch
  const byte patch_test_zones_one_per_z0[] = {0,-1};
  const byte patch_test_zones_one_per_z1[] = {1,-1};
  const byte patch_test_zones_one_per_z2[] = {2,-1};
  const byte patch_test_zones_one_per_z3[] = {3,4,-1};
const byte* patch_test_zones_one_per[Zone_Count] = {patch_test_zones_one_per_z0, patch_test_zones_one_per_z1, patch_test_zones_one_per_z2, patch_test_zones_one_per_z3};

const byte** patches[] = {patch_check_sliders, patch_check_sliders_1, patch_check_sliders_2, patch_check_sliders_3, patch_check_sliders_across, patch_check_sliders_down, patch_test_all1, patch_test_even_odd, patch_test_zones_one_per};

  prog_char patch_name_0[] PROGMEM = "check_sliders";
  prog_char patch_name_1[] PROGMEM = "check_sliders_1";
  prog_char patch_name_2[] PROGMEM = "check_sliders_2";
  prog_char patch_name_3[] PROGMEM = "check_sliders_3";
  prog_char patch_name_4[] PROGMEM = "check_sliders_across";
  prog_char patch_name_5[] PROGMEM = "check_sliders_down";
  prog_char patch_name_6[] PROGMEM = "test_all1";
  prog_char patch_name_7[] PROGMEM = "test_even_odd";
  prog_char patch_name_8[] PROGMEM = "test_zones_one_per";
PROGMEM const char *patch_names[] = {patch_name_0, patch_name_1, patch_name_2, patch_name_3, patch_name_4, patch_name_5, patch_name_6, patch_name_7, patch_name_8};

const byte Patch_Count = count_of(patches);

// End Generated by make patches.h

