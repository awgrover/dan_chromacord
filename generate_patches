#!/usr/bin/env perl
# --- $patches.h patch-src-files
use strict; use warnings; no warnings 'uninitialized'; use 5.010;
use Data::Dumper;
use File::Basename;
use IO::File;
my @output;

sub construct {
    my ($patchfile, $patchname, $patch) = @_;
    my $fullname = "patch_".basename($patchfile,'.patch');
    $fullname .= "_$patchname" if $patchname;
    my $at = $patchname ? "[$patchname] " : '';
    say "construct $fullname // from $at$patchfile";
    die "Error, expected 4 zones, found ",scalar(@$patch)," for $at$patchfile" if scalar(@$patch) != 4;
    my @rez;
    my @patchdecl;
    push @rez, "// Patch built from $at$patchfile";
    
    my $i = 0;
    foreach my $zone_values (@$patch) {
        my $zonedef = "";
        my $zonedef_name = "${fullname}_z${i}";
        if ($zone_values && @$zone_values) {
            $zonedef .= "  const byte ${zonedef_name}[] = ";
            $zonedef .= "{". join(",",@$zone_values,-1)."};";
            push @rez, $zonedef;
            }
        else {
            $zonedef_name = 'patch_empty_zone'
            }
        push @patchdecl, $zonedef_name;
        $i++;
        }
    push @rez, "const byte* ${fullname}[Zone_Count] = {".join(", ",@patchdecl)."};";
    push @output, join("\n",@rez);
    return $fullname;
    }

my $marker = 'Generated by make patches.h';

my $h_file = shift @ARGV;
die "no such file $h_file" if ! -e $h_file;
die "Need start marker: // $marker" if system("set -x; grep '$marker' $h_file");
die "Need end marker: // End $marker" if system("set -x; grep 'End $marker' $h_file");

push @output,"// $marker:";
my @patchnames;
foreach my $patchfile (@ARGV) {
    my $desc = do $patchfile;
    die $@ if $@;
    say "From $patchfile ",ref($desc);
    if (ref($desc) eq 'HASH') {
        foreach my $patchname (sort keys %$desc) {
            push @patchnames, construct($patchfile, $patchname, $desc->{$patchname});
            }
        }
    elsif (ref($desc) eq 'ARRAY') {
        push @patchnames, construct($patchfile, undef, $desc);
        }
    else { die "What is $patchfile: ",ref($desc); }
    }
push @output,"const byte** patches[] = {".join(", ",@patchnames)."};\n";
$output[-1] .= 'const byte Patch_Count = count_of(patches);';
push @output,"// End $marker";

my $tempfile = $h_file . ".tmp";
system("cp -pr $h_file $h_file.bak") && die;
my $oh = IO::File->new(">$tempfile") || die;
END { unlink $tempfile if -e $tempfile };
my $ih = IO::File->new("<$h_file") || die;
while (<$ih>) {
    /^\/\/ $marker/ && do {
        print $oh join("\n\n",@output);
        print $oh "\n";
        };
    (/^\/\/ $marker/../^\/\/ End $marker/) && next;
    print $oh $_;
    }
$oh->close;
$ih->close;
unlink( $h_file) || die;; 
rename( $tempfile, $h_file) || die;;


